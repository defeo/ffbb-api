#!/usr/bin/env node

var req = require('request')
var program = require('commander')
var assert = require('assert')
var Table = require('cli-table')
var _ = require('lodash')

var URLS = {
  search: 'http://www.ffbb.com/jouer/recherche-avancee',
  ajax: 'http://www.ffbb.com/system/ajax',
  clubLookup: 'http://www.ffbb.com/ffbb-webservice/lookup-club?cd_lbclub='
}

var SCRAPER = {
  searchForm: /<input type="hidden" name="form_build_id" value="(.+)" \/>\s<input type="hidden" name="form_id" value="ffbb_prototype_ws_simple_form" \/>/,
  searchFormId: 'ffbb_prototype_ws_simple_form',
  searchFormFields: {
    lastName: 'nom',
    firstName: 'prenom',
    gender: 'sexe',
    birthDate: 'dtNais[date]',
    licenceId: 'numLicence',
    nationalId: 'id_license',
    association: 'lbOrg',
    csrf: 'form_build_id'
  },
  licenceTable: /<td><div class="(\w+)">(?:<\w+.*?>)*(.*?)(?:<\/\w+>)+?<\/td>/g
}

var FIELD_NAME_MAPPING = {
  nrlicence: 'licenseId',
  numNational: 'nationalId',
  nom: 'lastName',
  prenom: 'firstName',
  sexe: 'gender',
  dateNaissance: 'birthDate',
  nomOrganisme: 'association',
  dateQualif: 'qualificationDate',
  typeLicence: 'licenseType'
}

var FIELD_NAME_LABEL = {
  licenseId: 'N° national',
  nationalId: 'N° licence',
  lastName: 'Nom',
  firstName: 'Prénom',
  gender: 'Sexe',
  birthDate: 'Date naissance',
  association: 'Club',
  qualificationDate: 'Date qualif.',
  licenseType: 'Type lic.'
}

/**
   Parses the HTML table containing license search results.
 */
function parseSearchResult (blob) {
  var items = []; var match
  while ((match = SCRAPER.licenceTable.exec(blob)) !== null) {
    items.push([match[1], match[2]])
  }
  if (!items) { return }

  items = _.chunk(items, _.keys(FIELD_NAME_MAPPING).length)

  return _.map(items, function (item) {
    var res = {}
    _.each(item, function (payload) {
      var fieldName = FIELD_NAME_MAPPING[payload[0]]
      assert(fieldName, 'should match a field name')
      res[fieldName] = payload[1]
    })
    return res
  })
}

/**
   Fetches the search form and extracts the CSRF nonce.
 */
function fetchSearchFormCSRF (next) {
  req(URLS.search, function (error, res, body) {
    if (error) {
      next(error)
    } else if (res.statusCode !== 200) {
      next(new Error('Wrong URL: ' + URLS.search), res)
    } else {
      next(null, SCRAPER.searchForm.exec(body)[1])
    }
  })
}

/**
   Fetches and parses licenses, given a CSRF id as `query.csrf`.
 */
function fetchLicenseCSRF (query, next) {
  var form = { form_id: SCRAPER.searchFormId }
  for (var f in SCRAPER.searchFormFields) {
    form[SCRAPER.searchFormFields[f]] = query[f] || ''
  }
  req.post({ url: URLS.ajax, form: form }, function (error, res, body) {
    if (error) {
      next(error)
    } else if (res.statusCode !== 200) {
      next(new Error('Wrong URL: ' + URLS.search), res)
    } else {
      var json = JSON.parse(body)
      var htmlOutput = json.find((elem) => elem != null && elem.command === 'insert')

      next(null, parseSearchResult(htmlOutput.data))
    }
  })
}

/**
   Fetches and parses licenses. It calls `fetchSearchFormCSRF` to obtain a CSRF
   id.
 */
function fetchLicense (query, next) {
  fetchSearchFormCSRF(function (err, csrf) {
    if (err) {
      next(err, csrf)
    } else {
      query.csrf = csrf
      fetchLicenseCSRF(query, next)
    }
  })
}

program
  .command('licence')
  .description('Chercher un licencié.')
  .option('-n, --lastName <nom>', 'Nom')
  .option('-p, --firstName <prenom>', 'Prénom')
  .option('-s, --gender <M/F>', 'Sexe', 'M')
  .option('-d, --birthDate <date>', 'Date de naissance')
  .option('-l, --licenseId <num>', 'Numéro de licence')
  .option('-i, --nationalId <num>', 'Numéro national')
  .option('-c, --association <club>', 'Club')
  .action(function (opts) {
    // This is really quick and dirty: if passes command line options, plus a
    // lot of junk down to `fetchLicense`, then it prints the results as a
    // table.
    fetchLicense(opts, function (err, licenses) {
      if (err) {
        console.log(err)
      } else {
        var head = _.values(FIELD_NAME_LABEL)
        var table = new Table({ head: head })
        _.each(licenses, function (license) {
          return table.push(_.values(license))
        })
        console.log(table.toString())
      }
    })
  })

program
  .parse(process.argv)
